name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scans

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: '18'
  THEME_API_PORT: 3001

jobs:
  # Code quality and security analysis
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint with SARIF output
        run: |
          npx eslint src/ --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif || true

      - name: Upload ESLint results to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      - name: Run Prettier format check
        run: npx prettier --check "**/*.{js,jsx,json,md,yml,yaml}"

      - name: Audit dependencies
        run: yarn audit --level moderate

  # Dependency and license checks
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # Theme system comprehensive testing
  theme-system-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-category: ['unit', 'integration', 'visual-regression', 'performance']
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Setup test environment
        run: |
          # Create test environment variables
          echo "GATSBY_THEME_API_URL=http://localhost:${{ env.THEME_API_PORT }}/api/v1" >> $GITHUB_ENV
          echo "REACT_APP_TEST_MODE=true" >> $GITHUB_ENV

      - name: Start mock API server
        run: |
          node scripts/mock-api-server.js &
          sleep 5
          curl -f http://localhost:${{ env.THEME_API_PORT }}/health || exit 1
        env:
          PORT: ${{ env.THEME_API_PORT }}

      - name: Run theme system tests
        run: |
          case "${{ matrix.test-category }}" in
            unit)
              yarn jest --selectProjects=unit --coverage --testPathPattern="theme|Theme"
              ;;
            integration)
              yarn jest --selectProjects=integration --testPathPattern="theme|Theme"
              ;;
            visual-regression)
              yarn jest --selectProjects=visual --testPathPattern="theme|Theme"
              ;;
            performance)
              yarn jest --selectProjects=performance --testPathPattern="theme|Theme"
              ;;
          esac
        env:
          CI: true

      - name: Upload test coverage
        if: matrix.test-category == 'unit'
        uses: codecov/codecov-action@v3
        with:
          flags: theme-system
          name: theme-system-coverage

  # Build the application
  build:
    name: Build Application
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          CI: false
          GATSBY_EXPERIMENTAL_PAGE_BUILD_ON_DATA_CHANGES: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            public/
          retention-days: 7

  # Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: public

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  # Lighthouse CI for performance monitoring
  lighthouse:
    name: Lighthouse CI
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Notify deployment status
  notify:
    name: Notify Deployment
    needs: [deploy, lighthouse]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "üöÄ Deployment successful!"
          echo "Site URL: https://nautel.github.io/v4"

      - name: Notify Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          exit 1